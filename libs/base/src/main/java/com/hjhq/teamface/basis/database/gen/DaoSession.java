package com.hjhq.teamface.basis.database.gen;

import java.util.Map;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.AbstractDaoSession;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.identityscope.IdentityScopeType;
import org.greenrobot.greendao.internal.DaoConfig;

import com.hjhq.teamface.basis.database.CacheData;
import com.hjhq.teamface.basis.database.Conversation;
import com.hjhq.teamface.basis.database.Member;
import com.hjhq.teamface.basis.database.PushMessage;
import com.hjhq.teamface.basis.database.SocketMessage;

import com.hjhq.teamface.basis.database.gen.CacheDataDao;
import com.hjhq.teamface.basis.database.gen.ConversationDao;
import com.hjhq.teamface.basis.database.gen.MemberDao;
import com.hjhq.teamface.basis.database.gen.PushMessageDao;
import com.hjhq.teamface.basis.database.gen.SocketMessageDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see org.greenrobot.greendao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig cacheDataDaoConfig;
    private final DaoConfig conversationDaoConfig;
    private final DaoConfig memberDaoConfig;
    private final DaoConfig pushMessageDaoConfig;
    private final DaoConfig socketMessageDaoConfig;

    private final CacheDataDao cacheDataDao;
    private final ConversationDao conversationDao;
    private final MemberDao memberDao;
    private final PushMessageDao pushMessageDao;
    private final SocketMessageDao socketMessageDao;

    public DaoSession(Database db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        cacheDataDaoConfig = daoConfigMap.get(CacheDataDao.class).clone();
        cacheDataDaoConfig.initIdentityScope(type);

        conversationDaoConfig = daoConfigMap.get(ConversationDao.class).clone();
        conversationDaoConfig.initIdentityScope(type);

        memberDaoConfig = daoConfigMap.get(MemberDao.class).clone();
        memberDaoConfig.initIdentityScope(type);

        pushMessageDaoConfig = daoConfigMap.get(PushMessageDao.class).clone();
        pushMessageDaoConfig.initIdentityScope(type);

        socketMessageDaoConfig = daoConfigMap.get(SocketMessageDao.class).clone();
        socketMessageDaoConfig.initIdentityScope(type);

        cacheDataDao = new CacheDataDao(cacheDataDaoConfig, this);
        conversationDao = new ConversationDao(conversationDaoConfig, this);
        memberDao = new MemberDao(memberDaoConfig, this);
        pushMessageDao = new PushMessageDao(pushMessageDaoConfig, this);
        socketMessageDao = new SocketMessageDao(socketMessageDaoConfig, this);

        registerDao(CacheData.class, cacheDataDao);
        registerDao(Conversation.class, conversationDao);
        registerDao(Member.class, memberDao);
        registerDao(PushMessage.class, pushMessageDao);
        registerDao(SocketMessage.class, socketMessageDao);
    }
    
    public void clear() {
        cacheDataDaoConfig.clearIdentityScope();
        conversationDaoConfig.clearIdentityScope();
        memberDaoConfig.clearIdentityScope();
        pushMessageDaoConfig.clearIdentityScope();
        socketMessageDaoConfig.clearIdentityScope();
    }

    public CacheDataDao getCacheDataDao() {
        return cacheDataDao;
    }

    public ConversationDao getConversationDao() {
        return conversationDao;
    }

    public MemberDao getMemberDao() {
        return memberDao;
    }

    public PushMessageDao getPushMessageDao() {
        return pushMessageDao;
    }

    public SocketMessageDao getSocketMessageDao() {
        return socketMessageDao;
    }

}
