package com.hjhq.teamface.basis.database.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hjhq.teamface.basis.database.Conversation;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONVERSATION".
*/
public class ConversationDao extends AbstractDao<Conversation, Long> {

    public static final String TABLENAME = "CONVERSATION";

    /**
     * Properties of entity Conversation.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ConversationId = new Property(0, long.class, "conversationId", true, "_id");
        public final static Property MyId = new Property(1, String.class, "myId", false, "MY_ID");
        public final static Property OneselfIMID = new Property(2, String.class, "oneselfIMID", false, "ONESELF_IMID");
        public final static Property CompanyId = new Property(3, String.class, "companyId", false, "COMPANY_ID");
        public final static Property SenderId = new Property(4, String.class, "senderId", false, "SENDER_ID");
        public final static Property ReceiverId = new Property(5, String.class, "receiverId", false, "RECEIVER_ID");
        public final static Property SenderName = new Property(6, String.class, "senderName", false, "SENDER_NAME");
        public final static Property SenderAvatarUrl = new Property(7, String.class, "senderAvatarUrl", false, "SENDER_AVATAR_URL");
        public final static Property ConversationType = new Property(8, int.class, "conversationType", false, "CONVERSATION_TYPE");
        public final static Property TargetId = new Property(9, String.class, "targetId", false, "TARGET_ID");
        public final static Property Title = new Property(10, String.class, "title", false, "TITLE");
        public final static Property UnreadMsgCount = new Property(11, int.class, "unreadMsgCount", false, "UNREAD_MSG_COUNT");
        public final static Property LastMessageType = new Property(12, int.class, "lastMessageType", false, "LAST_MESSAGE_TYPE");
        public final static Property LastMessageState = new Property(13, int.class, "lastMessageState", false, "LAST_MESSAGE_STATE");
        public final static Property LatestText = new Property(14, String.class, "latestText", false, "LATEST_TEXT");
        public final static Property LatestMessage = new Property(15, String.class, "latestMessage", false, "LATEST_MESSAGE");
        public final static Property Draft = new Property(16, String.class, "draft", false, "DRAFT");
        public final static Property LastMsgDate = new Property(17, long.class, "lastMsgDate", false, "LAST_MSG_DATE");
        public final static Property NextShowTime = new Property(18, long.class, "nextShowTime", false, "NEXT_SHOW_TIME");
        public final static Property AvatarUrl = new Property(19, String.class, "avatarUrl", false, "AVATAR_URL");
        public final static Property IsHide = new Property(20, int.class, "isHide", false, "IS_HIDE");
        public final static Property Principal = new Property(21, long.class, "principal", false, "PRINCIPAL");
        public final static Property NoBother = new Property(22, int.class, "noBother", false, "NO_BOTHER");
        public final static Property TopStatus = new Property(23, int.class, "topStatus", false, "TOP_STATUS");
        public final static Property Peoples = new Property(24, String.class, "peoples", false, "PEOPLES");
        public final static Property GroupType = new Property(25, int.class, "groupType", false, "GROUP_TYPE");
        public final static Property NotEmpty = new Property(26, boolean.class, "notEmpty", false, "NOT_EMPTY");
        public final static Property TotalMsgNum = new Property(27, int.class, "totalMsgNum", false, "TOTAL_MSG_NUM");
        public final static Property ResultNum = new Property(28, int.class, "resultNum", false, "RESULT_NUM");
        public final static Property ApplicationId = new Property(29, long.class, "applicationId", false, "APPLICATION_ID");
        public final static Property UpdateTime = new Property(30, long.class, "updateTime", false, "UPDATE_TIME");
        public final static Property Icon_color = new Property(31, String.class, "icon_color", false, "ICON_COLOR");
        public final static Property Icon_type = new Property(32, String.class, "icon_type", false, "ICON_TYPE");
        public final static Property Icon_url = new Property(33, String.class, "icon_url", false, "ICON_URL");
    }


    public ConversationDao(DaoConfig config) {
        super(config);
    }
    
    public ConversationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONVERSATION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: conversationId
                "\"MY_ID\" TEXT," + // 1: myId
                "\"ONESELF_IMID\" TEXT," + // 2: oneselfIMID
                "\"COMPANY_ID\" TEXT," + // 3: companyId
                "\"SENDER_ID\" TEXT," + // 4: senderId
                "\"RECEIVER_ID\" TEXT," + // 5: receiverId
                "\"SENDER_NAME\" TEXT," + // 6: senderName
                "\"SENDER_AVATAR_URL\" TEXT," + // 7: senderAvatarUrl
                "\"CONVERSATION_TYPE\" INTEGER NOT NULL ," + // 8: conversationType
                "\"TARGET_ID\" TEXT," + // 9: targetId
                "\"TITLE\" TEXT," + // 10: title
                "\"UNREAD_MSG_COUNT\" INTEGER NOT NULL ," + // 11: unreadMsgCount
                "\"LAST_MESSAGE_TYPE\" INTEGER NOT NULL ," + // 12: lastMessageType
                "\"LAST_MESSAGE_STATE\" INTEGER NOT NULL ," + // 13: lastMessageState
                "\"LATEST_TEXT\" TEXT," + // 14: latestText
                "\"LATEST_MESSAGE\" TEXT," + // 15: latestMessage
                "\"DRAFT\" TEXT," + // 16: draft
                "\"LAST_MSG_DATE\" INTEGER NOT NULL ," + // 17: lastMsgDate
                "\"NEXT_SHOW_TIME\" INTEGER NOT NULL ," + // 18: nextShowTime
                "\"AVATAR_URL\" TEXT," + // 19: avatarUrl
                "\"IS_HIDE\" INTEGER NOT NULL ," + // 20: isHide
                "\"PRINCIPAL\" INTEGER NOT NULL ," + // 21: principal
                "\"NO_BOTHER\" INTEGER NOT NULL ," + // 22: noBother
                "\"TOP_STATUS\" INTEGER NOT NULL ," + // 23: topStatus
                "\"PEOPLES\" TEXT," + // 24: peoples
                "\"GROUP_TYPE\" INTEGER NOT NULL ," + // 25: groupType
                "\"NOT_EMPTY\" INTEGER NOT NULL ," + // 26: notEmpty
                "\"TOTAL_MSG_NUM\" INTEGER NOT NULL ," + // 27: totalMsgNum
                "\"RESULT_NUM\" INTEGER NOT NULL ," + // 28: resultNum
                "\"APPLICATION_ID\" INTEGER NOT NULL ," + // 29: applicationId
                "\"UPDATE_TIME\" INTEGER NOT NULL ," + // 30: updateTime
                "\"ICON_COLOR\" TEXT," + // 31: icon_color
                "\"ICON_TYPE\" TEXT," + // 32: icon_type
                "\"ICON_URL\" TEXT);"); // 33: icon_url
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONVERSATION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Conversation entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getConversationId());
 
        String myId = entity.getMyId();
        if (myId != null) {
            stmt.bindString(2, myId);
        }
 
        String oneselfIMID = entity.getOneselfIMID();
        if (oneselfIMID != null) {
            stmt.bindString(3, oneselfIMID);
        }
 
        String companyId = entity.getCompanyId();
        if (companyId != null) {
            stmt.bindString(4, companyId);
        }
 
        String senderId = entity.getSenderId();
        if (senderId != null) {
            stmt.bindString(5, senderId);
        }
 
        String receiverId = entity.getReceiverId();
        if (receiverId != null) {
            stmt.bindString(6, receiverId);
        }
 
        String senderName = entity.getSenderName();
        if (senderName != null) {
            stmt.bindString(7, senderName);
        }
 
        String senderAvatarUrl = entity.getSenderAvatarUrl();
        if (senderAvatarUrl != null) {
            stmt.bindString(8, senderAvatarUrl);
        }
        stmt.bindLong(9, entity.getConversationType());
 
        String targetId = entity.getTargetId();
        if (targetId != null) {
            stmt.bindString(10, targetId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(11, title);
        }
        stmt.bindLong(12, entity.getUnreadMsgCount());
        stmt.bindLong(13, entity.getLastMessageType());
        stmt.bindLong(14, entity.getLastMessageState());
 
        String latestText = entity.getLatestText();
        if (latestText != null) {
            stmt.bindString(15, latestText);
        }
 
        String latestMessage = entity.getLatestMessage();
        if (latestMessage != null) {
            stmt.bindString(16, latestMessage);
        }
 
        String draft = entity.getDraft();
        if (draft != null) {
            stmt.bindString(17, draft);
        }
        stmt.bindLong(18, entity.getLastMsgDate());
        stmt.bindLong(19, entity.getNextShowTime());
 
        String avatarUrl = entity.getAvatarUrl();
        if (avatarUrl != null) {
            stmt.bindString(20, avatarUrl);
        }
        stmt.bindLong(21, entity.getIsHide());
        stmt.bindLong(22, entity.getPrincipal());
        stmt.bindLong(23, entity.getNoBother());
        stmt.bindLong(24, entity.getTopStatus());
 
        String peoples = entity.getPeoples();
        if (peoples != null) {
            stmt.bindString(25, peoples);
        }
        stmt.bindLong(26, entity.getGroupType());
        stmt.bindLong(27, entity.getNotEmpty() ? 1L: 0L);
        stmt.bindLong(28, entity.getTotalMsgNum());
        stmt.bindLong(29, entity.getResultNum());
        stmt.bindLong(30, entity.getApplicationId());
        stmt.bindLong(31, entity.getUpdateTime());
 
        String icon_color = entity.getIcon_color();
        if (icon_color != null) {
            stmt.bindString(32, icon_color);
        }
 
        String icon_type = entity.getIcon_type();
        if (icon_type != null) {
            stmt.bindString(33, icon_type);
        }
 
        String icon_url = entity.getIcon_url();
        if (icon_url != null) {
            stmt.bindString(34, icon_url);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Conversation entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getConversationId());
 
        String myId = entity.getMyId();
        if (myId != null) {
            stmt.bindString(2, myId);
        }
 
        String oneselfIMID = entity.getOneselfIMID();
        if (oneselfIMID != null) {
            stmt.bindString(3, oneselfIMID);
        }
 
        String companyId = entity.getCompanyId();
        if (companyId != null) {
            stmt.bindString(4, companyId);
        }
 
        String senderId = entity.getSenderId();
        if (senderId != null) {
            stmt.bindString(5, senderId);
        }
 
        String receiverId = entity.getReceiverId();
        if (receiverId != null) {
            stmt.bindString(6, receiverId);
        }
 
        String senderName = entity.getSenderName();
        if (senderName != null) {
            stmt.bindString(7, senderName);
        }
 
        String senderAvatarUrl = entity.getSenderAvatarUrl();
        if (senderAvatarUrl != null) {
            stmt.bindString(8, senderAvatarUrl);
        }
        stmt.bindLong(9, entity.getConversationType());
 
        String targetId = entity.getTargetId();
        if (targetId != null) {
            stmt.bindString(10, targetId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(11, title);
        }
        stmt.bindLong(12, entity.getUnreadMsgCount());
        stmt.bindLong(13, entity.getLastMessageType());
        stmt.bindLong(14, entity.getLastMessageState());
 
        String latestText = entity.getLatestText();
        if (latestText != null) {
            stmt.bindString(15, latestText);
        }
 
        String latestMessage = entity.getLatestMessage();
        if (latestMessage != null) {
            stmt.bindString(16, latestMessage);
        }
 
        String draft = entity.getDraft();
        if (draft != null) {
            stmt.bindString(17, draft);
        }
        stmt.bindLong(18, entity.getLastMsgDate());
        stmt.bindLong(19, entity.getNextShowTime());
 
        String avatarUrl = entity.getAvatarUrl();
        if (avatarUrl != null) {
            stmt.bindString(20, avatarUrl);
        }
        stmt.bindLong(21, entity.getIsHide());
        stmt.bindLong(22, entity.getPrincipal());
        stmt.bindLong(23, entity.getNoBother());
        stmt.bindLong(24, entity.getTopStatus());
 
        String peoples = entity.getPeoples();
        if (peoples != null) {
            stmt.bindString(25, peoples);
        }
        stmt.bindLong(26, entity.getGroupType());
        stmt.bindLong(27, entity.getNotEmpty() ? 1L: 0L);
        stmt.bindLong(28, entity.getTotalMsgNum());
        stmt.bindLong(29, entity.getResultNum());
        stmt.bindLong(30, entity.getApplicationId());
        stmt.bindLong(31, entity.getUpdateTime());
 
        String icon_color = entity.getIcon_color();
        if (icon_color != null) {
            stmt.bindString(32, icon_color);
        }
 
        String icon_type = entity.getIcon_type();
        if (icon_type != null) {
            stmt.bindString(33, icon_type);
        }
 
        String icon_url = entity.getIcon_url();
        if (icon_url != null) {
            stmt.bindString(34, icon_url);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Conversation readEntity(Cursor cursor, int offset) {
        Conversation entity = new Conversation( //
            cursor.getLong(offset + 0), // conversationId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // myId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // oneselfIMID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // companyId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // senderId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // receiverId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // senderName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // senderAvatarUrl
            cursor.getInt(offset + 8), // conversationType
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // targetId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // title
            cursor.getInt(offset + 11), // unreadMsgCount
            cursor.getInt(offset + 12), // lastMessageType
            cursor.getInt(offset + 13), // lastMessageState
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // latestText
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // latestMessage
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // draft
            cursor.getLong(offset + 17), // lastMsgDate
            cursor.getLong(offset + 18), // nextShowTime
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // avatarUrl
            cursor.getInt(offset + 20), // isHide
            cursor.getLong(offset + 21), // principal
            cursor.getInt(offset + 22), // noBother
            cursor.getInt(offset + 23), // topStatus
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // peoples
            cursor.getInt(offset + 25), // groupType
            cursor.getShort(offset + 26) != 0, // notEmpty
            cursor.getInt(offset + 27), // totalMsgNum
            cursor.getInt(offset + 28), // resultNum
            cursor.getLong(offset + 29), // applicationId
            cursor.getLong(offset + 30), // updateTime
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // icon_color
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // icon_type
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33) // icon_url
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Conversation entity, int offset) {
        entity.setConversationId(cursor.getLong(offset + 0));
        entity.setMyId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOneselfIMID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCompanyId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSenderId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setReceiverId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSenderName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSenderAvatarUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setConversationType(cursor.getInt(offset + 8));
        entity.setTargetId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTitle(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUnreadMsgCount(cursor.getInt(offset + 11));
        entity.setLastMessageType(cursor.getInt(offset + 12));
        entity.setLastMessageState(cursor.getInt(offset + 13));
        entity.setLatestText(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setLatestMessage(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setDraft(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setLastMsgDate(cursor.getLong(offset + 17));
        entity.setNextShowTime(cursor.getLong(offset + 18));
        entity.setAvatarUrl(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setIsHide(cursor.getInt(offset + 20));
        entity.setPrincipal(cursor.getLong(offset + 21));
        entity.setNoBother(cursor.getInt(offset + 22));
        entity.setTopStatus(cursor.getInt(offset + 23));
        entity.setPeoples(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setGroupType(cursor.getInt(offset + 25));
        entity.setNotEmpty(cursor.getShort(offset + 26) != 0);
        entity.setTotalMsgNum(cursor.getInt(offset + 27));
        entity.setResultNum(cursor.getInt(offset + 28));
        entity.setApplicationId(cursor.getLong(offset + 29));
        entity.setUpdateTime(cursor.getLong(offset + 30));
        entity.setIcon_color(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setIcon_type(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setIcon_url(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Conversation entity, long rowId) {
        entity.setConversationId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Conversation entity) {
        if(entity != null) {
            return entity.getConversationId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Conversation entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
