package com.hjhq.teamface.basis.database.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hjhq.teamface.basis.database.Member;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MEMBER".
*/
public class MemberDao extends AbstractDao<Member, Long> {

    public static final String TABLENAME = "MEMBER";

    /**
     * Properties of entity Member.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UpdateTime = new Property(0, long.class, "updateTime", false, "UPDATE_TIME");
        public final static Property MyId = new Property(1, String.class, "myId", false, "MY_ID");
        public final static Property Is_enable = new Property(2, String.class, "is_enable", false, "IS_ENABLE");
        public final static Property Post_name = new Property(3, String.class, "post_name", false, "POST_NAME");
        public final static Property Post_id = new Property(4, String.class, "post_id", false, "POST_ID");
        public final static Property Employee_name = new Property(5, String.class, "employee_name", false, "EMPLOYEE_NAME");
        public final static Property Role_name = new Property(6, String.class, "role_name", false, "ROLE_NAME");
        public final static Property Department_name = new Property(7, String.class, "department_name", false, "DEPARTMENT_NAME");
        public final static Property Phone = new Property(8, String.class, "phone", false, "PHONE");
        public final static Property Mobile_phone = new Property(9, String.class, "mobile_phone", false, "MOBILE_PHONE");
        public final static Property Sign_id = new Property(10, String.class, "sign_id", false, "SIGN_ID");
        public final static Property Picture = new Property(11, String.class, "picture", false, "PICTURE");
        public final static Property Email = new Property(12, String.class, "email", false, "EMAIL");
        public final static Property Company_id = new Property(13, String.class, "company_id", false, "COMPANY_ID");
        public final static Property Type = new Property(14, int.class, "type", false, "TYPE");
        public final static Property Id = new Property(15, long.class, "id", true, "_id");
        public final static Property Name = new Property(16, String.class, "name", false, "NAME");
        public final static Property Value = new Property(17, String.class, "value", false, "VALUE");
    }


    public MemberDao(DaoConfig config) {
        super(config);
    }
    
    public MemberDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MEMBER\" (" + //
                "\"UPDATE_TIME\" INTEGER NOT NULL ," + // 0: updateTime
                "\"MY_ID\" TEXT," + // 1: myId
                "\"IS_ENABLE\" TEXT," + // 2: is_enable
                "\"POST_NAME\" TEXT," + // 3: post_name
                "\"POST_ID\" TEXT," + // 4: post_id
                "\"EMPLOYEE_NAME\" TEXT," + // 5: employee_name
                "\"ROLE_NAME\" TEXT," + // 6: role_name
                "\"DEPARTMENT_NAME\" TEXT," + // 7: department_name
                "\"PHONE\" TEXT," + // 8: phone
                "\"MOBILE_PHONE\" TEXT," + // 9: mobile_phone
                "\"SIGN_ID\" TEXT," + // 10: sign_id
                "\"PICTURE\" TEXT," + // 11: picture
                "\"EMAIL\" TEXT," + // 12: email
                "\"COMPANY_ID\" TEXT," + // 13: company_id
                "\"TYPE\" INTEGER NOT NULL ," + // 14: type
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 15: id
                "\"NAME\" TEXT," + // 16: name
                "\"VALUE\" TEXT);"); // 17: value
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MEMBER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Member entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getUpdateTime());
 
        String myId = entity.getMyId();
        if (myId != null) {
            stmt.bindString(2, myId);
        }
 
        String is_enable = entity.getIs_enable();
        if (is_enable != null) {
            stmt.bindString(3, is_enable);
        }
 
        String post_name = entity.getPost_name();
        if (post_name != null) {
            stmt.bindString(4, post_name);
        }
 
        String post_id = entity.getPost_id();
        if (post_id != null) {
            stmt.bindString(5, post_id);
        }
 
        String employee_name = entity.getEmployee_name();
        if (employee_name != null) {
            stmt.bindString(6, employee_name);
        }
 
        String role_name = entity.getRole_name();
        if (role_name != null) {
            stmt.bindString(7, role_name);
        }
 
        String department_name = entity.getDepartment_name();
        if (department_name != null) {
            stmt.bindString(8, department_name);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(9, phone);
        }
 
        String mobile_phone = entity.getMobile_phone();
        if (mobile_phone != null) {
            stmt.bindString(10, mobile_phone);
        }
 
        String sign_id = entity.getSign_id();
        if (sign_id != null) {
            stmt.bindString(11, sign_id);
        }
 
        String picture = entity.getPicture();
        if (picture != null) {
            stmt.bindString(12, picture);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(13, email);
        }
 
        String company_id = entity.getCompany_id();
        if (company_id != null) {
            stmt.bindString(14, company_id);
        }
        stmt.bindLong(15, entity.getType());
        stmt.bindLong(16, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(17, name);
        }
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(18, value);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Member entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getUpdateTime());
 
        String myId = entity.getMyId();
        if (myId != null) {
            stmt.bindString(2, myId);
        }
 
        String is_enable = entity.getIs_enable();
        if (is_enable != null) {
            stmt.bindString(3, is_enable);
        }
 
        String post_name = entity.getPost_name();
        if (post_name != null) {
            stmt.bindString(4, post_name);
        }
 
        String post_id = entity.getPost_id();
        if (post_id != null) {
            stmt.bindString(5, post_id);
        }
 
        String employee_name = entity.getEmployee_name();
        if (employee_name != null) {
            stmt.bindString(6, employee_name);
        }
 
        String role_name = entity.getRole_name();
        if (role_name != null) {
            stmt.bindString(7, role_name);
        }
 
        String department_name = entity.getDepartment_name();
        if (department_name != null) {
            stmt.bindString(8, department_name);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(9, phone);
        }
 
        String mobile_phone = entity.getMobile_phone();
        if (mobile_phone != null) {
            stmt.bindString(10, mobile_phone);
        }
 
        String sign_id = entity.getSign_id();
        if (sign_id != null) {
            stmt.bindString(11, sign_id);
        }
 
        String picture = entity.getPicture();
        if (picture != null) {
            stmt.bindString(12, picture);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(13, email);
        }
 
        String company_id = entity.getCompany_id();
        if (company_id != null) {
            stmt.bindString(14, company_id);
        }
        stmt.bindLong(15, entity.getType());
        stmt.bindLong(16, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(17, name);
        }
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(18, value);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 15);
    }    

    @Override
    public Member readEntity(Cursor cursor, int offset) {
        Member entity = new Member( //
            cursor.getLong(offset + 0), // updateTime
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // myId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // is_enable
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // post_name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // post_id
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // employee_name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // role_name
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // department_name
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // phone
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // mobile_phone
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // sign_id
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // picture
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // email
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // company_id
            cursor.getInt(offset + 14), // type
            cursor.getLong(offset + 15), // id
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // name
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17) // value
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Member entity, int offset) {
        entity.setUpdateTime(cursor.getLong(offset + 0));
        entity.setMyId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIs_enable(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPost_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPost_id(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEmployee_name(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRole_name(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDepartment_name(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPhone(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMobile_phone(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSign_id(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPicture(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setEmail(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCompany_id(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setType(cursor.getInt(offset + 14));
        entity.setId(cursor.getLong(offset + 15));
        entity.setName(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setValue(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Member entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Member entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Member entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
