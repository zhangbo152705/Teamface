package com.hjhq.teamface.basis.database.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hjhq.teamface.basis.database.SocketMessage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SOCKET_MESSAGE".
*/
public class SocketMessageDao extends AbstractDao<SocketMessage, Long> {

    public static final String TABLENAME = "SOCKET_MESSAGE";

    /**
     * Properties of entity SocketMessage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ConversationId = new Property(0, long.class, "conversationId", false, "CONVERSATION_ID");
        public final static Property CompanyId = new Property(1, String.class, "companyId", false, "COMPANY_ID");
        public final static Property MyId = new Property(2, String.class, "myId", false, "MY_ID");
        public final static Property OneselfIMID = new Property(3, String.class, "oneselfIMID", false, "ONESELF_IMID");
        public final static Property UsCmdID = new Property(4, int.class, "usCmdID", false, "US_CMD_ID");
        public final static Property UcVer = new Property(5, int.class, "ucVer", false, "UC_VER");
        public final static Property UcDeviceType = new Property(6, int.class, "ucDeviceType", false, "UC_DEVICE_TYPE");
        public final static Property UcFlag = new Property(7, int.class, "ucFlag", false, "UC_FLAG");
        public final static Property ServerTimes = new Property(8, long.class, "serverTimes", false, "SERVER_TIMES");
        public final static Property MsgID = new Property(9, long.class, "msgID", true, "_id");
        public final static Property SenderID = new Property(10, String.class, "senderID", false, "SENDER_ID");
        public final static Property ReceiverID = new Property(11, String.class, "receiverID", false, "RECEIVER_ID");
        public final static Property ClientTimes = new Property(12, long.class, "clientTimes", false, "CLIENT_TIMES");
        public final static Property Rand = new Property(13, int.class, "rand", false, "RAND");
        public final static Property MsgContent = new Property(14, String.class, "msgContent", false, "MSG_CONTENT");
        public final static Property MsgType = new Property(15, int.class, "msgType", false, "MSG_TYPE");
        public final static Property FileName = new Property(16, String.class, "fileName", false, "FILE_NAME");
        public final static Property FileSize = new Property(17, long.class, "fileSize", false, "FILE_SIZE");
        public final static Property FileType = new Property(18, String.class, "fileType", false, "FILE_TYPE");
        public final static Property FileUrl = new Property(19, String.class, "fileUrl", false, "FILE_URL");
        public final static Property VideoUrl = new Property(20, String.class, "videoUrl", false, "VIDEO_URL");
        public final static Property FileId = new Property(21, String.class, "fileId", false, "FILE_ID");
        public final static Property FileLocalPath = new Property(22, String.class, "fileLocalPath", false, "FILE_LOCAL_PATH");
        public final static Property Longitude = new Property(23, String.class, "longitude", false, "LONGITUDE");
        public final static Property Latitude = new Property(24, String.class, "latitude", false, "LATITUDE");
        public final static Property Duration = new Property(25, int.class, "duration", false, "DURATION");
        public final static Property ShowTime = new Property(26, boolean.class, "showTime", false, "SHOW_TIME");
        public final static Property ResultCode = new Property(27, int.class, "resultCode", false, "RESULT_CODE");
        public final static Property Content = new Property(28, String.class, "content", false, "CONTENT");
        public final static Property IsAtMe = new Property(29, boolean.class, "isAtMe", false, "IS_AT_ME");
        public final static Property IsAtAll = new Property(30, boolean.class, "isAtAll", false, "IS_AT_ALL");
        public final static Property IsRead = new Property(31, boolean.class, "isRead", false, "IS_READ");
        public final static Property SendState = new Property(32, int.class, "sendState", false, "SEND_STATE");
        public final static Property CreateTime = new Property(33, long.class, "createTime", false, "CREATE_TIME");
        public final static Property FromName = new Property(34, String.class, "fromName", false, "FROM_NAME");
        public final static Property TargetName = new Property(35, String.class, "targetName", false, "TARGET_NAME");
        public final static Property Location = new Property(36, String.class, "location", false, "LOCATION");
        public final static Property SenderAvatar = new Property(37, String.class, "senderAvatar", false, "SENDER_AVATAR");
        public final static Property SenderName = new Property(38, String.class, "senderName", false, "SENDER_NAME");
        public final static Property ChatType = new Property(39, int.class, "chatType", false, "CHAT_TYPE");
        public final static Property Readnum = new Property(40, int.class, "readnum", false, "READNUM");
        public final static Property GroupMemeberNum = new Property(41, int.class, "groupMemeberNum", false, "GROUP_MEMEBER_NUM");
        public final static Property AllPeoples = new Property(42, String.class, "allPeoples", false, "ALL_PEOPLES");
        public final static Property ReadPeoples = new Property(43, String.class, "readPeoples", false, "READ_PEOPLES");
        public final static Property LoginResponseCode = new Property(44, int.class, "loginResponseCode", false, "LOGIN_RESPONSE_CODE");
    }


    public SocketMessageDao(DaoConfig config) {
        super(config);
    }
    
    public SocketMessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SOCKET_MESSAGE\" (" + //
                "\"CONVERSATION_ID\" INTEGER NOT NULL ," + // 0: conversationId
                "\"COMPANY_ID\" TEXT," + // 1: companyId
                "\"MY_ID\" TEXT," + // 2: myId
                "\"ONESELF_IMID\" TEXT," + // 3: oneselfIMID
                "\"US_CMD_ID\" INTEGER NOT NULL ," + // 4: usCmdID
                "\"UC_VER\" INTEGER NOT NULL ," + // 5: ucVer
                "\"UC_DEVICE_TYPE\" INTEGER NOT NULL ," + // 6: ucDeviceType
                "\"UC_FLAG\" INTEGER NOT NULL ," + // 7: ucFlag
                "\"SERVER_TIMES\" INTEGER NOT NULL ," + // 8: serverTimes
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 9: msgID
                "\"SENDER_ID\" TEXT," + // 10: senderID
                "\"RECEIVER_ID\" TEXT," + // 11: receiverID
                "\"CLIENT_TIMES\" INTEGER NOT NULL ," + // 12: clientTimes
                "\"RAND\" INTEGER NOT NULL ," + // 13: rand
                "\"MSG_CONTENT\" TEXT," + // 14: msgContent
                "\"MSG_TYPE\" INTEGER NOT NULL ," + // 15: msgType
                "\"FILE_NAME\" TEXT," + // 16: fileName
                "\"FILE_SIZE\" INTEGER NOT NULL ," + // 17: fileSize
                "\"FILE_TYPE\" TEXT," + // 18: fileType
                "\"FILE_URL\" TEXT," + // 19: fileUrl
                "\"VIDEO_URL\" TEXT," + // 20: videoUrl
                "\"FILE_ID\" TEXT," + // 21: fileId
                "\"FILE_LOCAL_PATH\" TEXT," + // 22: fileLocalPath
                "\"LONGITUDE\" TEXT," + // 23: longitude
                "\"LATITUDE\" TEXT," + // 24: latitude
                "\"DURATION\" INTEGER NOT NULL ," + // 25: duration
                "\"SHOW_TIME\" INTEGER NOT NULL ," + // 26: showTime
                "\"RESULT_CODE\" INTEGER NOT NULL ," + // 27: resultCode
                "\"CONTENT\" TEXT," + // 28: content
                "\"IS_AT_ME\" INTEGER NOT NULL ," + // 29: isAtMe
                "\"IS_AT_ALL\" INTEGER NOT NULL ," + // 30: isAtAll
                "\"IS_READ\" INTEGER NOT NULL ," + // 31: isRead
                "\"SEND_STATE\" INTEGER NOT NULL ," + // 32: sendState
                "\"CREATE_TIME\" INTEGER NOT NULL ," + // 33: createTime
                "\"FROM_NAME\" TEXT," + // 34: fromName
                "\"TARGET_NAME\" TEXT," + // 35: targetName
                "\"LOCATION\" TEXT," + // 36: location
                "\"SENDER_AVATAR\" TEXT," + // 37: senderAvatar
                "\"SENDER_NAME\" TEXT," + // 38: senderName
                "\"CHAT_TYPE\" INTEGER NOT NULL ," + // 39: chatType
                "\"READNUM\" INTEGER NOT NULL ," + // 40: readnum
                "\"GROUP_MEMEBER_NUM\" INTEGER NOT NULL ," + // 41: groupMemeberNum
                "\"ALL_PEOPLES\" TEXT," + // 42: allPeoples
                "\"READ_PEOPLES\" TEXT," + // 43: readPeoples
                "\"LOGIN_RESPONSE_CODE\" INTEGER NOT NULL );"); // 44: loginResponseCode
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SOCKET_MESSAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SocketMessage entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getConversationId());
 
        String companyId = entity.getCompanyId();
        if (companyId != null) {
            stmt.bindString(2, companyId);
        }
 
        String myId = entity.getMyId();
        if (myId != null) {
            stmt.bindString(3, myId);
        }
 
        String oneselfIMID = entity.getOneselfIMID();
        if (oneselfIMID != null) {
            stmt.bindString(4, oneselfIMID);
        }
        stmt.bindLong(5, entity.getUsCmdID());
        stmt.bindLong(6, entity.getUcVer());
        stmt.bindLong(7, entity.getUcDeviceType());
        stmt.bindLong(8, entity.getUcFlag());
        stmt.bindLong(9, entity.getServerTimes());
        stmt.bindLong(10, entity.getMsgID());
 
        String senderID = entity.getSenderID();
        if (senderID != null) {
            stmt.bindString(11, senderID);
        }
 
        String receiverID = entity.getReceiverID();
        if (receiverID != null) {
            stmt.bindString(12, receiverID);
        }
        stmt.bindLong(13, entity.getClientTimes());
        stmt.bindLong(14, entity.getRand());
 
        String msgContent = entity.getMsgContent();
        if (msgContent != null) {
            stmt.bindString(15, msgContent);
        }
        stmt.bindLong(16, entity.getMsgType());
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(17, fileName);
        }
        stmt.bindLong(18, entity.getFileSize());
 
        String fileType = entity.getFileType();
        if (fileType != null) {
            stmt.bindString(19, fileType);
        }
 
        String fileUrl = entity.getFileUrl();
        if (fileUrl != null) {
            stmt.bindString(20, fileUrl);
        }
 
        String videoUrl = entity.getVideoUrl();
        if (videoUrl != null) {
            stmt.bindString(21, videoUrl);
        }
 
        String fileId = entity.getFileId();
        if (fileId != null) {
            stmt.bindString(22, fileId);
        }
 
        String fileLocalPath = entity.getFileLocalPath();
        if (fileLocalPath != null) {
            stmt.bindString(23, fileLocalPath);
        }
 
        String longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindString(24, longitude);
        }
 
        String latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindString(25, latitude);
        }
        stmt.bindLong(26, entity.getDuration());
        stmt.bindLong(27, entity.getShowTime() ? 1L: 0L);
        stmt.bindLong(28, entity.getResultCode());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(29, content);
        }
        stmt.bindLong(30, entity.getIsAtMe() ? 1L: 0L);
        stmt.bindLong(31, entity.getIsAtAll() ? 1L: 0L);
        stmt.bindLong(32, entity.getIsRead() ? 1L: 0L);
        stmt.bindLong(33, entity.getSendState());
        stmt.bindLong(34, entity.getCreateTime());
 
        String fromName = entity.getFromName();
        if (fromName != null) {
            stmt.bindString(35, fromName);
        }
 
        String targetName = entity.getTargetName();
        if (targetName != null) {
            stmt.bindString(36, targetName);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(37, location);
        }
 
        String senderAvatar = entity.getSenderAvatar();
        if (senderAvatar != null) {
            stmt.bindString(38, senderAvatar);
        }
 
        String senderName = entity.getSenderName();
        if (senderName != null) {
            stmt.bindString(39, senderName);
        }
        stmt.bindLong(40, entity.getChatType());
        stmt.bindLong(41, entity.getReadnum());
        stmt.bindLong(42, entity.getGroupMemeberNum());
 
        String allPeoples = entity.getAllPeoples();
        if (allPeoples != null) {
            stmt.bindString(43, allPeoples);
        }
 
        String readPeoples = entity.getReadPeoples();
        if (readPeoples != null) {
            stmt.bindString(44, readPeoples);
        }
        stmt.bindLong(45, entity.getLoginResponseCode());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SocketMessage entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getConversationId());
 
        String companyId = entity.getCompanyId();
        if (companyId != null) {
            stmt.bindString(2, companyId);
        }
 
        String myId = entity.getMyId();
        if (myId != null) {
            stmt.bindString(3, myId);
        }
 
        String oneselfIMID = entity.getOneselfIMID();
        if (oneselfIMID != null) {
            stmt.bindString(4, oneselfIMID);
        }
        stmt.bindLong(5, entity.getUsCmdID());
        stmt.bindLong(6, entity.getUcVer());
        stmt.bindLong(7, entity.getUcDeviceType());
        stmt.bindLong(8, entity.getUcFlag());
        stmt.bindLong(9, entity.getServerTimes());
        stmt.bindLong(10, entity.getMsgID());
 
        String senderID = entity.getSenderID();
        if (senderID != null) {
            stmt.bindString(11, senderID);
        }
 
        String receiverID = entity.getReceiverID();
        if (receiverID != null) {
            stmt.bindString(12, receiverID);
        }
        stmt.bindLong(13, entity.getClientTimes());
        stmt.bindLong(14, entity.getRand());
 
        String msgContent = entity.getMsgContent();
        if (msgContent != null) {
            stmt.bindString(15, msgContent);
        }
        stmt.bindLong(16, entity.getMsgType());
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(17, fileName);
        }
        stmt.bindLong(18, entity.getFileSize());
 
        String fileType = entity.getFileType();
        if (fileType != null) {
            stmt.bindString(19, fileType);
        }
 
        String fileUrl = entity.getFileUrl();
        if (fileUrl != null) {
            stmt.bindString(20, fileUrl);
        }
 
        String videoUrl = entity.getVideoUrl();
        if (videoUrl != null) {
            stmt.bindString(21, videoUrl);
        }
 
        String fileId = entity.getFileId();
        if (fileId != null) {
            stmt.bindString(22, fileId);
        }
 
        String fileLocalPath = entity.getFileLocalPath();
        if (fileLocalPath != null) {
            stmt.bindString(23, fileLocalPath);
        }
 
        String longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindString(24, longitude);
        }
 
        String latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindString(25, latitude);
        }
        stmt.bindLong(26, entity.getDuration());
        stmt.bindLong(27, entity.getShowTime() ? 1L: 0L);
        stmt.bindLong(28, entity.getResultCode());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(29, content);
        }
        stmt.bindLong(30, entity.getIsAtMe() ? 1L: 0L);
        stmt.bindLong(31, entity.getIsAtAll() ? 1L: 0L);
        stmt.bindLong(32, entity.getIsRead() ? 1L: 0L);
        stmt.bindLong(33, entity.getSendState());
        stmt.bindLong(34, entity.getCreateTime());
 
        String fromName = entity.getFromName();
        if (fromName != null) {
            stmt.bindString(35, fromName);
        }
 
        String targetName = entity.getTargetName();
        if (targetName != null) {
            stmt.bindString(36, targetName);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(37, location);
        }
 
        String senderAvatar = entity.getSenderAvatar();
        if (senderAvatar != null) {
            stmt.bindString(38, senderAvatar);
        }
 
        String senderName = entity.getSenderName();
        if (senderName != null) {
            stmt.bindString(39, senderName);
        }
        stmt.bindLong(40, entity.getChatType());
        stmt.bindLong(41, entity.getReadnum());
        stmt.bindLong(42, entity.getGroupMemeberNum());
 
        String allPeoples = entity.getAllPeoples();
        if (allPeoples != null) {
            stmt.bindString(43, allPeoples);
        }
 
        String readPeoples = entity.getReadPeoples();
        if (readPeoples != null) {
            stmt.bindString(44, readPeoples);
        }
        stmt.bindLong(45, entity.getLoginResponseCode());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 9);
    }    

    @Override
    public SocketMessage readEntity(Cursor cursor, int offset) {
        SocketMessage entity = new SocketMessage( //
            cursor.getLong(offset + 0), // conversationId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // companyId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // myId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // oneselfIMID
            cursor.getInt(offset + 4), // usCmdID
            cursor.getInt(offset + 5), // ucVer
            cursor.getInt(offset + 6), // ucDeviceType
            cursor.getInt(offset + 7), // ucFlag
            cursor.getLong(offset + 8), // serverTimes
            cursor.getLong(offset + 9), // msgID
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // senderID
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // receiverID
            cursor.getLong(offset + 12), // clientTimes
            cursor.getInt(offset + 13), // rand
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // msgContent
            cursor.getInt(offset + 15), // msgType
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // fileName
            cursor.getLong(offset + 17), // fileSize
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // fileType
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // fileUrl
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // videoUrl
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // fileId
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // fileLocalPath
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // longitude
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // latitude
            cursor.getInt(offset + 25), // duration
            cursor.getShort(offset + 26) != 0, // showTime
            cursor.getInt(offset + 27), // resultCode
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // content
            cursor.getShort(offset + 29) != 0, // isAtMe
            cursor.getShort(offset + 30) != 0, // isAtAll
            cursor.getShort(offset + 31) != 0, // isRead
            cursor.getInt(offset + 32), // sendState
            cursor.getLong(offset + 33), // createTime
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // fromName
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // targetName
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // location
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // senderAvatar
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // senderName
            cursor.getInt(offset + 39), // chatType
            cursor.getInt(offset + 40), // readnum
            cursor.getInt(offset + 41), // groupMemeberNum
            cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42), // allPeoples
            cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43), // readPeoples
            cursor.getInt(offset + 44) // loginResponseCode
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SocketMessage entity, int offset) {
        entity.setConversationId(cursor.getLong(offset + 0));
        entity.setCompanyId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMyId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOneselfIMID(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUsCmdID(cursor.getInt(offset + 4));
        entity.setUcVer(cursor.getInt(offset + 5));
        entity.setUcDeviceType(cursor.getInt(offset + 6));
        entity.setUcFlag(cursor.getInt(offset + 7));
        entity.setServerTimes(cursor.getLong(offset + 8));
        entity.setMsgID(cursor.getLong(offset + 9));
        entity.setSenderID(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setReceiverID(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setClientTimes(cursor.getLong(offset + 12));
        entity.setRand(cursor.getInt(offset + 13));
        entity.setMsgContent(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setMsgType(cursor.getInt(offset + 15));
        entity.setFileName(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setFileSize(cursor.getLong(offset + 17));
        entity.setFileType(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setFileUrl(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setVideoUrl(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setFileId(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setFileLocalPath(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setLongitude(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setLatitude(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setDuration(cursor.getInt(offset + 25));
        entity.setShowTime(cursor.getShort(offset + 26) != 0);
        entity.setResultCode(cursor.getInt(offset + 27));
        entity.setContent(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setIsAtMe(cursor.getShort(offset + 29) != 0);
        entity.setIsAtAll(cursor.getShort(offset + 30) != 0);
        entity.setIsRead(cursor.getShort(offset + 31) != 0);
        entity.setSendState(cursor.getInt(offset + 32));
        entity.setCreateTime(cursor.getLong(offset + 33));
        entity.setFromName(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setTargetName(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setLocation(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setSenderAvatar(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setSenderName(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setChatType(cursor.getInt(offset + 39));
        entity.setReadnum(cursor.getInt(offset + 40));
        entity.setGroupMemeberNum(cursor.getInt(offset + 41));
        entity.setAllPeoples(cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42));
        entity.setReadPeoples(cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43));
        entity.setLoginResponseCode(cursor.getInt(offset + 44));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SocketMessage entity, long rowId) {
        entity.setMsgID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SocketMessage entity) {
        if(entity != null) {
            return entity.getMsgID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SocketMessage entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
