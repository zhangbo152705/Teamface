package com.hjhq.teamface.basis.database.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hjhq.teamface.basis.database.PushMessage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PUSH_MESSAGE".
*/
public class PushMessageDao extends AbstractDao<PushMessage, Long> {

    public static final String TABLENAME = "PUSH_MESSAGE";

    /**
     * Properties of entity PushMessage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Type = new Property(1, String.class, "type", false, "TYPE");
        public final static Property Push_content = new Property(2, String.class, "push_content", false, "PUSH_CONTENT");
        public final static Property Assistant_id = new Property(3, String.class, "assistant_id", false, "ASSISTANT_ID");
        public final static Property Bean_name = new Property(4, String.class, "bean_name", false, "BEAN_NAME");
        public final static Property Bean_name_chinese = new Property(5, String.class, "bean_name_chinese", false, "BEAN_NAME_CHINESE");
        public final static Property Title = new Property(6, String.class, "title", false, "TITLE");
        public final static Property Sender_name = new Property(7, String.class, "sender_name", false, "SENDER_NAME");
        public final static Property Create_time = new Property(8, String.class, "create_time", false, "CREATE_TIME");
        public final static Property Read_status = new Property(9, String.class, "read_status", false, "READ_STATUS");
        public final static Property Group_id = new Property(10, String.class, "group_id", false, "GROUP_ID");
        public final static Property Assistant_name = new Property(11, String.class, "assistant_name", false, "ASSISTANT_NAME");
        public final static Property MyId = new Property(12, String.class, "myId", false, "MY_ID");
        public final static Property CompanyId = new Property(13, String.class, "companyId", false, "COMPANY_ID");
        public final static Property FieldInfo = new Property(14, String.class, "fieldInfo", false, "FIELD_INFO");
        public final static Property OrginFieldInfo = new Property(15, String.class, "orginFieldInfo", false, "ORGIN_FIELD_INFO");
        public final static Property Style = new Property(16, String.class, "style", false, "STYLE");
        public final static Property Data_id = new Property(17, String.class, "data_id", false, "DATA_ID");
        public final static Property Param_fields = new Property(18, String.class, "param_fields", false, "PARAM_FIELDS");
        public final static Property Icon_url = new Property(19, String.class, "icon_url", false, "ICON_URL");
        public final static Property Icon_color = new Property(20, String.class, "icon_color", false, "ICON_COLOR");
        public final static Property Icon_type = new Property(21, String.class, "icon_type", false, "ICON_TYPE");
        public final static Property Icon = new Property(22, String.class, "icon", false, "ICON");
        public final static Property Im_apr_id = new Property(23, String.class, "im_apr_id", false, "IM_APR_ID");
    }


    public PushMessageDao(DaoConfig config) {
        super(config);
    }
    
    public PushMessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PUSH_MESSAGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"TYPE\" TEXT," + // 1: type
                "\"PUSH_CONTENT\" TEXT," + // 2: push_content
                "\"ASSISTANT_ID\" TEXT," + // 3: assistant_id
                "\"BEAN_NAME\" TEXT," + // 4: bean_name
                "\"BEAN_NAME_CHINESE\" TEXT," + // 5: bean_name_chinese
                "\"TITLE\" TEXT," + // 6: title
                "\"SENDER_NAME\" TEXT," + // 7: sender_name
                "\"CREATE_TIME\" TEXT," + // 8: create_time
                "\"READ_STATUS\" TEXT," + // 9: read_status
                "\"GROUP_ID\" TEXT," + // 10: group_id
                "\"ASSISTANT_NAME\" TEXT," + // 11: assistant_name
                "\"MY_ID\" TEXT," + // 12: myId
                "\"COMPANY_ID\" TEXT," + // 13: companyId
                "\"FIELD_INFO\" TEXT," + // 14: fieldInfo
                "\"ORGIN_FIELD_INFO\" TEXT," + // 15: orginFieldInfo
                "\"STYLE\" TEXT," + // 16: style
                "\"DATA_ID\" TEXT," + // 17: data_id
                "\"PARAM_FIELDS\" TEXT," + // 18: param_fields
                "\"ICON_URL\" TEXT," + // 19: icon_url
                "\"ICON_COLOR\" TEXT," + // 20: icon_color
                "\"ICON_TYPE\" TEXT," + // 21: icon_type
                "\"ICON\" TEXT," + // 22: icon
                "\"IM_APR_ID\" TEXT);"); // 23: im_apr_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PUSH_MESSAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PushMessage entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(2, type);
        }
 
        String push_content = entity.getPush_content();
        if (push_content != null) {
            stmt.bindString(3, push_content);
        }
 
        String assistant_id = entity.getAssistant_id();
        if (assistant_id != null) {
            stmt.bindString(4, assistant_id);
        }
 
        String bean_name = entity.getBean_name();
        if (bean_name != null) {
            stmt.bindString(5, bean_name);
        }
 
        String bean_name_chinese = entity.getBean_name_chinese();
        if (bean_name_chinese != null) {
            stmt.bindString(6, bean_name_chinese);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(7, title);
        }
 
        String sender_name = entity.getSender_name();
        if (sender_name != null) {
            stmt.bindString(8, sender_name);
        }
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(9, create_time);
        }
 
        String read_status = entity.getRead_status();
        if (read_status != null) {
            stmt.bindString(10, read_status);
        }
 
        String group_id = entity.getGroup_id();
        if (group_id != null) {
            stmt.bindString(11, group_id);
        }
 
        String assistant_name = entity.getAssistant_name();
        if (assistant_name != null) {
            stmt.bindString(12, assistant_name);
        }
 
        String myId = entity.getMyId();
        if (myId != null) {
            stmt.bindString(13, myId);
        }
 
        String companyId = entity.getCompanyId();
        if (companyId != null) {
            stmt.bindString(14, companyId);
        }
 
        String fieldInfo = entity.getFieldInfo();
        if (fieldInfo != null) {
            stmt.bindString(15, fieldInfo);
        }
 
        String orginFieldInfo = entity.getOrginFieldInfo();
        if (orginFieldInfo != null) {
            stmt.bindString(16, orginFieldInfo);
        }
 
        String style = entity.getStyle();
        if (style != null) {
            stmt.bindString(17, style);
        }
 
        String data_id = entity.getData_id();
        if (data_id != null) {
            stmt.bindString(18, data_id);
        }
 
        String param_fields = entity.getParam_fields();
        if (param_fields != null) {
            stmt.bindString(19, param_fields);
        }
 
        String icon_url = entity.getIcon_url();
        if (icon_url != null) {
            stmt.bindString(20, icon_url);
        }
 
        String icon_color = entity.getIcon_color();
        if (icon_color != null) {
            stmt.bindString(21, icon_color);
        }
 
        String icon_type = entity.getIcon_type();
        if (icon_type != null) {
            stmt.bindString(22, icon_type);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(23, icon);
        }
 
        String im_apr_id = entity.getIm_apr_id();
        if (im_apr_id != null) {
            stmt.bindString(24, im_apr_id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PushMessage entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(2, type);
        }
 
        String push_content = entity.getPush_content();
        if (push_content != null) {
            stmt.bindString(3, push_content);
        }
 
        String assistant_id = entity.getAssistant_id();
        if (assistant_id != null) {
            stmt.bindString(4, assistant_id);
        }
 
        String bean_name = entity.getBean_name();
        if (bean_name != null) {
            stmt.bindString(5, bean_name);
        }
 
        String bean_name_chinese = entity.getBean_name_chinese();
        if (bean_name_chinese != null) {
            stmt.bindString(6, bean_name_chinese);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(7, title);
        }
 
        String sender_name = entity.getSender_name();
        if (sender_name != null) {
            stmt.bindString(8, sender_name);
        }
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(9, create_time);
        }
 
        String read_status = entity.getRead_status();
        if (read_status != null) {
            stmt.bindString(10, read_status);
        }
 
        String group_id = entity.getGroup_id();
        if (group_id != null) {
            stmt.bindString(11, group_id);
        }
 
        String assistant_name = entity.getAssistant_name();
        if (assistant_name != null) {
            stmt.bindString(12, assistant_name);
        }
 
        String myId = entity.getMyId();
        if (myId != null) {
            stmt.bindString(13, myId);
        }
 
        String companyId = entity.getCompanyId();
        if (companyId != null) {
            stmt.bindString(14, companyId);
        }
 
        String fieldInfo = entity.getFieldInfo();
        if (fieldInfo != null) {
            stmt.bindString(15, fieldInfo);
        }
 
        String orginFieldInfo = entity.getOrginFieldInfo();
        if (orginFieldInfo != null) {
            stmt.bindString(16, orginFieldInfo);
        }
 
        String style = entity.getStyle();
        if (style != null) {
            stmt.bindString(17, style);
        }
 
        String data_id = entity.getData_id();
        if (data_id != null) {
            stmt.bindString(18, data_id);
        }
 
        String param_fields = entity.getParam_fields();
        if (param_fields != null) {
            stmt.bindString(19, param_fields);
        }
 
        String icon_url = entity.getIcon_url();
        if (icon_url != null) {
            stmt.bindString(20, icon_url);
        }
 
        String icon_color = entity.getIcon_color();
        if (icon_color != null) {
            stmt.bindString(21, icon_color);
        }
 
        String icon_type = entity.getIcon_type();
        if (icon_type != null) {
            stmt.bindString(22, icon_type);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(23, icon);
        }
 
        String im_apr_id = entity.getIm_apr_id();
        if (im_apr_id != null) {
            stmt.bindString(24, im_apr_id);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public PushMessage readEntity(Cursor cursor, int offset) {
        PushMessage entity = new PushMessage( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // push_content
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // assistant_id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // bean_name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // bean_name_chinese
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // title
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // sender_name
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // create_time
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // read_status
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // group_id
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // assistant_name
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // myId
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // companyId
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // fieldInfo
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // orginFieldInfo
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // style
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // data_id
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // param_fields
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // icon_url
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // icon_color
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // icon_type
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // icon
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23) // im_apr_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PushMessage entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPush_content(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAssistant_id(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBean_name(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBean_name_chinese(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTitle(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSender_name(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCreate_time(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRead_status(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setGroup_id(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAssistant_name(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setMyId(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCompanyId(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setFieldInfo(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setOrginFieldInfo(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setStyle(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setData_id(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setParam_fields(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setIcon_url(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setIcon_color(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setIcon_type(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setIcon(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setIm_apr_id(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PushMessage entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PushMessage entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PushMessage entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
